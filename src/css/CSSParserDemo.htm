<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>CSS Parser Demo</title>
<script type="text/javascript" src="../util/StringReader.js"></script>
<script type="text/javascript" src="../util/TokenStream.js"></script>
<script type="text/javascript" src="../util/EventTarget.js"></script>
<script type="text/javascript" src="CSSTokens.js"></script>
<script type="text/javascript" src="CSSParser.js"></script>

</head>
<body>
<h1>CSS Parser Demo</h1>
<textarea rows="10" cols="40" id="input">
@charset "UTF-8"; 

@import url("booya.css") print,screen;
@import "whatup.css" screen;
@import "wicked.css";

li.inline {
  background: url("something.png");
  display: inline;
  padding-left: 3px;
  padding-right: 7px;
  border-right: 1px dotted #066;
}

li.last {
  display: inline;
  padding-left: 3px !important;
  padding-right: 3px;
  border-right: 0px;
} 

@media print {
    li.inline {
      color: black;
    }
}

</textarea>
<input type="button" onclick="parse()" value="parse">
<p>(You may want to keep the CSS kinda small, this could take a while.)</p>
<div id="output">

</div>
<script type="text/javascript">

function parse(){
    var parser = new CSSParser();
    parser.addListener("startstylesheet", function(){
        log("Starting style sheet");
    });
    
    parser.addListener("endstylesheet", function(){
        log("Ending style sheet");
    });
    
    parser.addListener("charset", function(event){
        log("Charset is " + event.charset);
    });
    
    parser.addListener("startpage", function(event){
        log("Starting page '" + event.pseudo + "'");
    });
    
    
    parser.addListener("endpage", function(event){
        log("Ending page '" + event.pseudo + "'");
    });
    
    parser.addListener("import", function(event){
        log("Importing " + event.uri + " for media types [" + event.media + "]");
    });
    
    parser.addListener("startrule", function(event){
        log("Starting rule with selectors [" + event.selectors + "]");
    });
    
    parser.addListener("endrule", function(event){
        log("Ending rule with selectors [" + event.selectors + "]");
    });
    
    parser.addListener("property", function(event){
        log("Property '" + event.property + "' has a value of '" + event.value + "' and " + (event.important ? "is" : "isn't") + " important.");
    });
    
    parser.addListener("startmedia", function(event){
        log("Starting media [" + event.media + "]");
    });
    
    parser.addListener("endmedia", function(event){
        log("Ending media [" + event.media + "]");
    });    

    try {
        parser.parse(document.getElementById("input").value)
    } catch (ex){
        log("Parse error: " + ex.message);
    }
}


function log(value){
var output = document.getElementById("output");
        
        output.innerHTML += value + "<br>";
}

</script>
</body>
</html>
