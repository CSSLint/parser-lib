<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>CSS Tokens Tests</title>
<!-- Combo-handled YUI CSS files: -->
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/combo?2.7.0/build/logger/assets/logger.css&2.7.0/build/yuitest/assets/testlogger.css">
<!-- Combo-handled YUI JS files: -->
<script type="text/javascript" src="http://yui.yahooapis.com/combo?2.7.0/build/yahoo-dom-event/yahoo-dom-event.js&2.7.0/build/logger/logger-min.js&2.7.0/build/yuitest/yuitest-min.js"></script>
<script type="text/javascript" src="../../build/parser-lib.js"></script>
<script type="text/javascript" src="../../build/parser-lib-css.js"></script>


</head>
<body>
<h1>CSS Tokens Tests</h1>
<script type="text/javascript">

YAHOO.namespace("test");

YAHOO.test.CSSTokens = (function(){
    
    var assert = YAHOO.util.Assert,
        TokenStream = parserlib.util.TokenStream,
        CSSTokens = parserlib.css.Tokens;
    
    function CSSTokenTestCase(info){    
    
        YAHOO.tool.TestCase.call(this, info);
        this.examples = info.examples;    
        
        for (var prop in this.examples){
            if (this.examples.hasOwnProperty(prop)){
                this["testExample: " + prop] = function(prop){
                    return function(){
                        this._testExample(prop, this.examples[prop]);
                    };
                }(prop);
            }
        }
    }
    
    CSSTokenTestCase.prototype = new YAHOO.tool.TestCase();
    
    CSSTokenTestCase.prototype._testExample = function(example, outputs){
        var tokenStream = new TokenStream(example, CSSTokens);
        var tt;
    
        for (var i=0, len=outputs.length; i < len; i++){
            tt = tokenStream.get((outputs[i] > -1 ? CSSTokens[outputs[i]].channel : undefined));
            assert.areEqual(outputs[i], tt, "Token type should be " + tokenStream.tokenName(outputs[i]) + " but was " + tokenStream.tokenName(tt) + " (" + ( tokenStream.token() ? tokenStream.token().value : "unknown") + ").");           
        }

        //if there was an invalid token, stop here
        if (tt > -1){
            tt = tokenStream.get();
            assert.areEqual(CSSTokens.EOF, tt, "Expected end of input but found token " + tokenStream.tokenName(tt) + " (" + ( tokenStream.token() ? tokenStream.token().value : "unknown") + ").");
        }
    };
    
    //-------------------------------------------------------------------------
    // Base Test Suite
    //-------------------------------------------------------------------------
    
    var suite = new YAHOO.tool.TestSuite("CSS Tokens");
   
   
    suite.add(new CSSTokenTestCase({
        name : "Tests for Whitespace",
        
        examples: {
            " "     : [CSSTokens.S],
            "\n"    : [CSSTokens.S],
            "\n \t" : [CSSTokens.S],
            "\f \n" : [CSSTokens.S]        
        }        
    }));

    suite.add(new CSSTokenTestCase({
        name : "Tests for comments",
        
        examples: {
            "/* booya */"     : [],
            "/*\n booya */"   : [],
            "/*\n booya \n*/" : []     
        }        
    }));

    suite.add(new CSSTokenTestCase({
        name : "Tests for strings",
        
        examples: {
            "'hello'"       : [CSSTokens.STRING],
            "\"hello\""     : [CSSTokens.STRING],
            "''"            : [CSSTokens.STRING],
            "\"\""          : [CSSTokens.STRING],
            "'hello\""      : [CSSTokens.INVALID, CSSTokens.INVALID],
            "\"hello'"      : [CSSTokens.INVALID],
            "'hel\\\'lo'"   : [CSSTokens.STRING],
            "\"hel\\\"lo\"" : [CSSTokens.STRING]
        }        
    }));

   
    suite.add(new CSSTokenTestCase({
        name : "Tests for URLs",
        
        examples: {
            "url(foo.jpg)"      : [CSSTokens.URI],
            "url('foo.jpg')"    : [CSSTokens.URI],
            "url(\"foo.jpg\")"  : [CSSTokens.URI],

            "url(http://www.nczonline.net/favicon.ico)":    [CSSTokens.URI],
            "url('http://www.nczonline.net/favicon.ico')":  [CSSTokens.URI],
            "url(\"http://www.nczonline.net/favicon.ico\")":[CSSTokens.URI],
            
            "url(http://www.nczonline.net/favicon.ico?a=b&c=d)":    [CSSTokens.URI],
            "url('http://www.nczonline.net/favicon.ico?a=b&c=d')":  [CSSTokens.URI],
            "url(\"http://www.nczonline.net/favicon.ico?a=b&c=d\")":[CSSTokens.URI]
        }        
    }));

    suite.add(new CSSTokenTestCase({
        name : "Tests for @ rules",
        
        examples: {
            "@charset"      : [-1],
            "@charset "     : [CSSTokens.CHARSET_SYM],
            "@CHARSET"      : [-1],
            "@CHARSET "     : [-1]
            
        }        
    }));
    
    
    suite.add(new CSSTokenTestCase({
        name : "Tests for Numbers",
        
        examples: {
        
            //regular numbers
            "1"         : [CSSTokens.NUMBER],
            "20.0"      : [CSSTokens.NUMBER],
            ".3"        : [CSSTokens.NUMBER],
            
            "4px"       : [CSSTokens.LENGTH],
            "50.0PX"    : [CSSTokens.LENGTH],
            ".6Px"      : [CSSTokens.LENGTH],
            
            "7cm"       : [CSSTokens.LENGTH],
            "7CM"       : [CSSTokens.LENGTH],
            "7cM"       : [CSSTokens.LENGTH],
            "8.0mm"     : [CSSTokens.LENGTH],
            ".9in"      : [CSSTokens.LENGTH],
            "7pc"       : [CSSTokens.LENGTH],
            "8.0pt"     : [CSSTokens.LENGTH],
            
            "3%"        : [CSSTokens.PERCENTAGE],
            "45.05%"    : [CSSTokens.PERCENTAGE],
            ".9%"       : [CSSTokens.PERCENTAGE],

            "5em"       : [CSSTokens.EMS],
            "50.0EM"    : [CSSTokens.EMS],
            ".5eM"      : [CSSTokens.EMS],
            
            "5ex"       : [CSSTokens.EXS],
            "50.0EX"    : [CSSTokens.EXS],
            ".5eX"      : [CSSTokens.EXS]  
        }        
    }));

    suite.add(new CSSTokenTestCase({
        name : "Tests for Properties",
        
        examples: {
        
            //regular CSS functions
            "background: red;"       : [CSSTokens.IDENT, CSSTokens.COLON, CSSTokens.IDENT, CSSTokens.SEMICOLON],
            "background-color: red;" : [CSSTokens.IDENT, CSSTokens.COLON, CSSTokens.IDENT, CSSTokens.SEMICOLON],
            
            "filter: progid:DXImageTransform.Microsoft.Wave(strength=100);": [CSSTokens.IDENT, CSSTokens.COLON, CSSTokens.IE_FILTER, CSSTokens.SEMICOLON]
 
        }        
    }));

    
    

    suite.add(new CSSTokenTestCase({
        name : "Tests for Functions",
        
        examples: {
        
            //regular CSS functions
            "rgb(255,0,1)"      : [CSSTokens.FUNCTION, CSSTokens.NUMBER, CSSTokens.COMMA, CSSTokens.NUMBER, CSSTokens.COMMA, CSSTokens.NUMBER, CSSTokens.RPAREN],
            "counter(par-num, upper-roman)" : [CSSTokens.FUNCTION, CSSTokens.IDENT, CSSTokens.COMMA, CSSTokens.IDENT, CSSTokens.RPAREN],

            //old-style IE filters - interpreted as bunch of tokens
            "alpha(opacity=50)" : [CSSTokens.FUNCTION, CSSTokens.IDENT, CSSTokens.EQUALS, CSSTokens.NUMBER, CSSTokens.RPAREN],

            //IE filters
            "progid:DXImageTransform.Microsoft.Wave(strength=100)"                  : [CSSTokens.IE_FILTER],
            "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)"    : [CSSTokens.IE_FILTER],
            "progid:DXImageTransform.Microsoft.Iris(irisstyle='STAR' duration=4)"   : [CSSTokens.IE_FILTER]
        }        
    }));

   
    
    //return it
    return suite;

})();

(function (){
    //create the logger
    var logger = new YAHOO.tool.TestLogger();
    
    //add the tests
    YAHOO.tool.TestRunner.add(YAHOO.test.CSSTokens);
    YAHOO.tool.TestRunner.run();

})();


</script>
</body>
</html>
