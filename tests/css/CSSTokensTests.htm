<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>CSS Tokens Tests</title>
<!-- Combo-handled YUI CSS files: -->
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/combo?2.7.0/build/logger/assets/logger.css&2.7.0/build/yuitest/assets/testlogger.css">
<!-- Combo-handled YUI JS files: -->
<script type="text/javascript" src="http://yui.yahooapis.com/combo?2.7.0/build/yahoo-dom-event/yahoo-dom-event.js&2.7.0/build/logger/logger-min.js&2.7.0/build/yuitest/yuitest-min.js"></script>
<script type="text/javascript" src="../../build/parser-lib.js"></script>
<script type="text/javascript" src="../../build/parser-lib-css.js"></script>


</head>
<body>
<h1>CSS Tokens Tests</h1>
<script type="text/javascript">

YAHOO.namespace("test");

YAHOO.test.CSSTokens = (function(){
    
    var assert = YAHOO.util.Assert;
    
    function CSSTokenTestCase(info){    
    
        YAHOO.tool.TestCase.call(this, info);
        this.examples = info.examples;    
        
        for (var prop in this.examples){
            if (this.examples.hasOwnProperty(prop)){
                this["testExample: " + prop] = function(prop){
                    return function(){
                        this._testExample(prop, this.examples[prop]);
                    };
                }(prop);
            }
        }
    }
    
    CSSTokenTestCase.prototype = new YAHOO.tool.TestCase();
    
    CSSTokenTestCase.prototype._testExample = function(example, outputs){
        var tokenStream = new TokenStream(example, CSSTokens);
        var tt;
    
        for (var i=0, len=outputs.length; i < len; i++){
            tt = tokenStream.get(CSSTokens[outputs[i]].channel);
            assert.areEqual(outputs[i], tt, "Token type should be " + CSSTokens[outputs[i]].name + " but was " + CSSTokens[tt].name + " (" + tokenStream.token().value + ").");           
        }

        tt = tokenStream.get();
        assert.areEqual(CSSTokens.EOF, tt, "Expected end of input but found token " + CSSTokens[tt].name + " (" + tokenStream.token().value + ").");
    };
    
    //-------------------------------------------------------------------------
    // Base Test Suite
    //-------------------------------------------------------------------------
    
    var suite = new YAHOO.tool.TestSuite("CSS Tokens");
    
/*
            {
                name: "S",
                pattern: s,
                channel: "ws"   //put onto another channel so I can get it later              
            },
            {
                name: "COMMENT",
                pattern: comment,
                hide: true   //don't generate token
            },
            //CDO and CDC intentionally omitted
            {
                name: "INCLUDES",
                text: "~="
            },
            {
                name: "DASHMATCH",
                text: "|="
            },
            {
                name: "STRING",
                pattern: string1 + "|" + string2,
            },
            {
                name: "INVALID",
                pattern: invalid1 + "|" + invalid2,
            },  
        

            {
                name: "HASH",
                pattern: "#" + name
            },
            {
                name: "IMPORT_SYM",
                pattern: "@IMPORT",
                patternOpt: "i"
            },
            {
                name: "PAGE_SYM",
                pattern: "@PAGE",
                patternOpt: "i"
            },
            {
                name: "MEDIA_SYM",
                pattern: "@MEDIA",
                patternOpt: "i"
            },
            {
                name: "CHARSET_SYM",
                text: "@charset "
            },
            {
                name: "IMPORTANT_SYM",
                pattern: "!(?:" + w + "|" + comment + ")*IMPORTANT",
                patternOpt: "i"
            },
            {
                name: "EMS",
                pattern: num + "em",
                patternOpt: "i"
            },
            {
                name: "EXS",
                pattern: num + "ex",
                patternOpt: "i"
            },
            {
                name: "LENGTH",
                pattern: num + "px|" + num + "cm|" + num + "mm|" + num + "in|" + num + "pt|" + num + "pc",
                patternOpt: "i"
            },
            {
                name: "ANGLE",
                pattern: num + "deg|" + num + "rad|" + num + "grad",
                patternOpt: "i"
            },
            {
                name: "TIME",
                pattern: num + "ms|" + num + "s",
                patternOpt: "i"
            },
            {
                name: "FREQ",
                pattern: num + "hz|" + num + "khz",
                patternOpt: "i"
            },
            {
                name: "DIMENSION",
                pattern: num + ident
            },   
            {
                name: "PERCENTAGE",
                pattern: num + "%"
            },
            {
                name: "NUMBER",
                pattern: num 
            },
            {
                name: "URI",
                pattern: "url\\(" + w + string + w + "\\)" + "|" + "url\\(" + w + url + w + "\\)"
            },

            //exception for IE filters - yuck
            {
                name: "IE_FILTER",
                pattern: "[a-z:\\.]+\\([^\\)]*\\)",
                patternOpt: "i"
            },    

            {
                name: "FUNCTION",
                pattern: ident + "\\("
            },    
                
            {
                name: "IDENT",
                pattern: ident
            },        
            //Not defined as tokens, but might as well be
            {
                name: "SLASH",
                text: "/"
            },
            {
                name: "MINUS",
                text: "-"
            },
            {
                name: "PLUS",
                text: "+"
            },
            {
                name: "STAR",
                text: "*"
            },
            {
                name: "GREATER",
                text: ">"
            },
            {
                name: "LBRACE",
                text: "{"
            },   
            {
                name: "RBRACE",
                text: "}"
            },      
            {
                name: "LBRACKET",
                text: "["
            },   
            {
                name: "RBRACKET",
                text: "]"
            },    
            {
                name: "EQUALS",
                text: "="
            },
            {
                name: "COLON",
                text: ":"
            },    
            {
                name: "SEMICOLON",
                text: ";"
            },    
         
            {
                name: "LPAREN",
                text: "("
            },   
            {
                name: "RPAREN",
                text: ")"
            },   
          
            {
                name: "DOT",
                text: "."
            },    
            {
                name: "COMMA",
                text: ","
            }
        ];

*/    
    
   
    suite.add(new CSSTokenTestCase({
        name : "Tests for Whitespace",
        
        examples: {
            " "     : [CSSTokens.S],
            "\n"    : [CSSTokens.S],
            "\n \t" : [CSSTokens.S],
            "\f \n" : [CSSTokens.S]        
        }        
    }));

    suite.add(new CSSTokenTestCase({
        name : "Tests for comments",
        
        examples: {
            "/* booya */"     : [],
            "/*\n booya */"   : [],
            "/*\n booya \n*/" : []     
        }        
    }));

    suite.add(new CSSTokenTestCase({
        name : "Tests for strings",
        
        examples: {
            "'hello'"       : [CSSTokens.STRING],
            "\"hello\""     : [CSSTokens.STRING],
            "''"            : [CSSTokens.STRING],
            "\"\""          : [CSSTokens.STRING],
            "'hello\""      : [CSSTokens.INVALID, CSSTokens.INVALID],
            "\"hello'"      : [CSSTokens.INVALID],
            "'hel\\\'lo'"   : [CSSTokens.STRING],
            "\"hel\\\"lo\"" : [CSSTokens.STRING]
        }        
    }));

   
    suite.add(new CSSTokenTestCase({
        name : "Tests for URLs",
        
        examples: {
            "url(foo.jpg)"      : [CSSTokens.URI],
            "url('foo.jpg')"    : [CSSTokens.URI],
            "url(\"foo.jpg\")"  : [CSSTokens.URI],

            "url(http://www.nczonline.net/favicon.ico)":    [CSSTokens.URI],
            "url('http://www.nczonline.net/favicon.ico')":  [CSSTokens.URI],
            "url(\"http://www.nczonline.net/favicon.ico\")":[CSSTokens.URI],
            
            "url(http://www.nczonline.net/favicon.ico?a=b&c=d)":    [CSSTokens.URI],
            "url('http://www.nczonline.net/favicon.ico?a=b&c=d')":  [CSSTokens.URI],
            "url(\"http://www.nczonline.net/favicon.ico?a=b&c=d\")":[CSSTokens.URI]
        }        
    }));

   
    
    //return it
    return suite;

})();

(function (){
    //create the logger
    var logger = new YAHOO.tool.TestLogger();
    
    //add the tests
    YAHOO.tool.TestRunner.add(YAHOO.test.CSSTokens);
    YAHOO.tool.TestRunner.run();

})();


</script>
</body>
</html>
